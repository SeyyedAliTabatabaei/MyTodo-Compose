package ir.mytodo.presentation.homeimport android.util.Logimport androidx.annotation.VisibleForTestingimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport dagger.hilt.android.lifecycle.HiltViewModelimport ir.mytodo.domain.model.Todoimport ir.mytodo.domain.model.base.ResultEntityimport ir.mytodo.domain.model.base.UiStateimport ir.mytodo.domain.usecase.DeleteTodoUseCaseimport ir.mytodo.domain.usecase.GetTodoListUseCaseimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.flow.updateimport javax.inject.Inject@HiltViewModelclass HomeViewModel @Inject constructor(    private val getTodoListUseCase: GetTodoListUseCase ,    private val deleteTodoUseCase: DeleteTodoUseCase) : ViewModel() {    private val _uiStateTodoList = MutableStateFlow<UiState<List<Todo>>>(UiState.Idle)    val uiStateTodoList : StateFlow<UiState<List<Todo>>> = _uiStateTodoList.asStateFlow()    init {        getTodoList()    }    @VisibleForTesting    private fun updateStateTodoList(actionUpdate : UiState<List<Todo>>.() -> UiState<List<Todo>>) {        _uiStateTodoList.update { actionUpdate(it) }    }    fun getTodoList() {        getTodoListUseCase.invoke(Unit)            .onStart {                updateStateTodoList { UiState.Loading }            }.onEach {                updateStateTodoList {                    when(it) {                        is ResultEntity.Success -> UiState.Success(it.data)                        is ResultEntity.Error -> UiState.Error(it.error)                    }                }            }.launchIn(viewModelScope)    }    fun deleteTodo(todo : Todo) {        deleteTodoUseCase.invoke(todo)            .onStart {            }.onEach {                when(it) {                    is ResultEntity.Success -> {                        modifyTodoList { removeIf { it.id == todo.id } }                        UiState.Success(todo)                    }                    is ResultEntity.Error -> UiState.Error(it.error)                }            }.launchIn(viewModelScope)    }    fun upsertTodoInList(todo: Todo?) {        todo ?: return        modifyTodoList {            val index = indexOfFirst { it.id == todo.id }            if (index >= 0) set(index, todo) else add(0, todo)        }    }    private fun modifyTodoList(modification : MutableList<Todo>.() -> Unit) {        if (uiStateTodoList.value is UiState.Success) {            val currentList = (uiStateTodoList.value as UiState.Success).resultData            val updateList = currentList.toMutableList().apply(modification)            updateStateTodoList { UiState.Success(updateList) }        }    }}